package ca.datalatics.mapreduce.customformat;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MyDriver {
	
	public static class MyMapper extends Mapper<MyKey, MyValue, Text, Text>{
		
		public void map(MyKey key,MyValue value,Context context) throws IOException, InterruptedException{
			
			if(key.getStatus().equals("on")){
				context.write(new Text(key.getSensorType()), new Text(key.getStatus()));
			}
		}
		
	}
	
	

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "MyCustomFormat");
		job.setJarByClass(ca.datalatics.mapreduce.customformat.MyDriver.class);
		job.setMapperClass(org.apache.hadoop.mapreduce.MyMapper.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		Path outputPath = new Path(args[1]);
		outputPath.getFileSystem(conf).delete(outputPath);

		if (!job.waitForCompletion(true))
			return;
	}

}
