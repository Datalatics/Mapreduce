package ca.datalatics.mapreduce.custom;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class AverageWordSize {

	public static class AverageWordMapper extends Mapper<LongWritable, Text, Text, IntPair> {

		public void map(LongWritable key, Text value, Context context) {

			String words[] = value.toString().split(" ");
			int wordlength = 0;
			int wordcount = 0;
			for (String word : words) {

				IntPair ip = new IntPair();
				wordlength += word.length();
				ip.set(wordlength, 1);
				context.write(word, ip);

			}

		}

	}

	public static class AverageWordReducer extends Reducer<Text, IntPair, Text, IntWritable> {

		public void reduce() {

		}

	}

	public static class IntPair implements WritableComparable<IntPair> {

		private int first;
		private int second;

		public void set(int left, int right) {
			this.first = left;
			this.second = right;
		}

		@Override
		public void readFields(DataInput in) throws IOException {

			first = in.readInt();
			second = in.readInt();
		}

		@Override
		public void write(DataOutput out) throws IOException {
			out.writeInt(first);
			out.writeInt(second);
		}

		public int hashcode() {
			return first * 111 * second;
		}

		public boolean equals(Object obj) {
			if (obj instanceof IntPair) {
				IntPair ob = (IntPair) obj;
				return ob.first == this.first && ob.second == this.second;
			} else {
				return false;
			}
		}

		@Override
		public int compareTo(IntPair o) {
			if (first != o.first) {
				return first < o.first ? -1 : 1;
			} else if (second != o.second) {
				return second < o.second ? -1 : 1;
			} else {
				return 0;
			}
		}

		public int getFirst() {
			return first;
		}

		public int getSecond() {
			return second;
		}

	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "JobName");
		job.setJarByClass(ca.datalatics.mapreduce.custom.AverageWordSize.class);
		job.setMapperClass(AverageWordMapper.class);

		job.setReducerClass(AverageWordReducer.class);

		// TODO: specify output types
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path("src"));
		FileOutputFormat.setOutputPath(job, new Path("out"));

		if (!job.waitForCompletion(true))
			return;
	}

}
