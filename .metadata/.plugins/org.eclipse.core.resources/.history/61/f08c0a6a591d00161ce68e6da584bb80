package ca.datalatics.mapreduce.custom;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class AverageWordSize {

	public static class AverageWordMapper extends Mapper<LongWritable, Text, Text, IntPair> {

		IntPair sumAndCount = new IntPair();

		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {

			String words[] = value.toString().split(" ");
			for (String word : words) {

				sumAndCount.set(word.length(), 1);
				context.write(new Text(word), sumAndCount);

			}

		}

	}

	public static class AverageWordReducer extends Reducer<Text, IntPair, Text, DoubleWritable> {

		private DoubleWritable result = new DoubleWritable();

		static int total = 0;
		static int wordSize = 0;

		public void reduce(Text key, Iterable<IntPair> value, Context context)
				throws IOException, InterruptedException {

			for (IntPair ip : value) {
				wordSize =+ip.getFirst();
				total =+ ip.getSecond();
			}

			double average = wordSize / total;
			result.set(average);
			context.write(key, result);

		}

	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "AverageWordSize");
		job.setJarByClass(ca.datalatics.mapreduce.custom.AverageWordSize.class);
		job.setMapperClass(AverageWordMapper.class);

		job.setReducerClass(AverageWordReducer.class);

		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntPair.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(DoubleWritable.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		Path outputPath = new Path(args[1]);
		outputPath.getFileSystem(conf).delete(outputPath);

		if (!job.waitForCompletion(true))
			return;
	}

}
