package ca.datalatics.mapreduce;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import ca.datalatics.mapreduce.WeatherData.WeatherMapper;

public class WeatherData {

	public static class WeatherMapper extends Mapper<LongWritable, Text, Text, Text> {

		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {

			String line = value.toString();

			// Example of Input
			// Date Max Min
			// 25380 20130101 2.514 -135.69 58.43 8.3 1.1 4.7 4.9 5.6 0.01 C 1.0
			// -0.1 0.4 97.3 36.0 69.4 -99.000 -99.000 -99.000 -99.000 -99.000
			// -9999.0 -9999.0 -9999.0 -9999.0 -9999.0

			String date = line.substring(6, 14);

			float temp_Max = Float.parseFloat(line.substring(39, 45).trim());
			float temp_Min = Float.parseFloat(line.substring(47, 53).trim());

			if (temp_Max > 40.0) {
				// Hot day
				context.write(new Text("Hot Day " + date), new Text(String.valueOf(temp_Max)));
			}

			if (temp_Min < 10) {
				// Cold day
				context.write(new Text("Cold Day " + date), new Text(String.valueOf(temp_Min)));
			}
		}

	}


public static class WeatherReducer extends Reducer<Text,Text,Text,Text> {

	public void reducer(Text key, Iterable<Text> values, Context context) throws IOException,InterruptedException {

	}

}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "JobName");
		job.setJarByClass(ca.datalatics.mapreduce.WeatherData.class);
		job.setMapperClass(WeatherMapper.class);

		job.setReducerClass(WeatherReducer.class);

		// TODO: specify output types
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path("src"));
		FileOutputFormat.setOutputPath(job, new Path("out"));

		if (!job.waitForCompletion(true))
			return;
	}

}
