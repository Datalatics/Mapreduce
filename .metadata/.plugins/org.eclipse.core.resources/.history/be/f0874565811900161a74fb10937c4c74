package ca.datalatics.mapreduce;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class Patent {

	public static class PatentMapper extends Mapper<LongWritable, Text, IntWritable, IntWritable>{
		
		public void map(LongWritable key, Text value, Context context){
			
		}

	}

	public static class PatentReducer extends Reducer<IntWritable, IntWritable, IntWritable, IntWritable>{
		
		public void reduce(LongWritable key, Text value, Context context){
			
		}

	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "Patent");
		job.setJarByClass(ca.datalatics.mapreduce.Patent.class);
		job.setMapperClass(PatentMapper.class);

		job.setReducerClass(PatentReducer.class);

		// TODO: specify output types
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path("src"));
		FileOutputFormat.setOutputPath(job, new Path("out"));

		if (!job.waitForCompletion(true))
			return;
	}

}
