package ca.datalatics.mapreduce.customformat;

import java.io.IOException;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.LineRecordReader;

public class MyRecordReader extends RecordReader<MyKey, MyValue> {

	private MyKey key;
	private MyValue value;
	private LineRecordReader reader = new LineRecordReader();

	@Override
	public void close() throws IOException {
		reader.close();

	}

	@Override
	public MyKey getCurrentKey() throws IOException, InterruptedException {
		return key;
	}

	@Override
	public MyValue getCurrentValue() throws IOException, InterruptedException {
		return value;
	}

	@Override
	public float getProgress() throws IOException, InterruptedException {
		return reader.getProgress();
	}

	@Override
	public void initialize(InputSplit arg0, TaskAttemptContext arg1) throws IOException, InterruptedException {
		reader.initialize(arg0, arg1);

	}

	@Override
	public boolean nextKeyValue() throws IOException, InterruptedException {
		boolean isNextValue = reader.nextKeyValue();
		MyKey key =  null;
		MyValue value = null;
		
		if (isNextValue) {

			Text line = reader.getCurrentValue();
			String[] tokens = line.toString().split("\t");
            if(tokens.length==5){
			key = new MyKey(tokens[0], tokens[1], tokens[2]);
			value = new MyValue(tokens[3], tokens[4]);
            }

		} 
		return isNextValue;
	}

}
