package ca.datalatics.mapreduce;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class TempDriver {

	public static class TempMapper extends Mapper<LongWritable, Text, IntWritable, IntWritable> {

		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {

			String line[] = value.toString().split(" ");

			if (line != null && line.length > 2) {
				int year = Integer.parseInt(line[0]);
				int temp = Integer.parseInt(line[1]);
				context.write(new IntWritable(year), new IntWritable(temp));
			}

		}

	}

	public static class TempReducer extends Reducer<IntWritable, IntWritable, IntWritable, IntWritable> {

		public void reduce(IntWritable key, Iterable<IntWritable> values, Context context)
				throws IOException, InterruptedException {

			int maxTemp = Integer.MIN_VALUE;

			for (IntWritable x : values) {
				if (x.get() > maxTemp) {
					maxTemp = x.get();
				}
			}

			context.write(key, new IntWritable(maxTemp));

		}

	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "Temperature");
		job.setJarByClass(ca.datalatics.mapreduce.TempDriver.class);
		job.setMapperClass(TempMapper.class);

		job.setReducerClass(TempReducer.class);

		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(IntWritable.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));

		// deleting the output path automatically from hdfs so that we don't
		// have delete it explicitly
		Path outputPath = new Path(args[1]);
		outputPath.getFileSystem(conf).delete(outputPath);

		if (!job.waitForCompletion(true))
			return;
	}

}
