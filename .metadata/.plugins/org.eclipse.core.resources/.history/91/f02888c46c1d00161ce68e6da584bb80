package ca.datalatics.mapreduce.nystock;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;




public class StockDriver {
	
	public static class StockMapper extends Mapper<LongWritable, Text, Text, StockInfo>{
		
		public void map(LongWritable key, Text value, Context context){
			
			String stockData[] = value.toString().split(",");
			
			StockInfo stock = new StockInfo
					(stockData[0], stockData[1], Double.parseDouble(stock_price_open), stock_price_high, stock_price_low, stock_price_close, stock_volume, stock_price_adj_close)
			
			
		}
		
	}

	public static class StockReducer extends Reducer<Text, StockInfo, Text, StockInfo>{
		
		public void reduce(Text key, Iterable<StockInfo> values, Context context){
			
			
			
		}
		
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "JobName");
		job.setJarByClass(ca.datalatics.mapreduce.nystock.StockDriver.class);
		job.setMapperClass(StockMapper.class);

		job.setReducerClass(StockReducer.class);

		// TODO: specify output types
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path("src"));
		FileOutputFormat.setOutputPath(job, new Path("out"));

		if (!job.waitForCompletion(true))
			return;
	}

}
