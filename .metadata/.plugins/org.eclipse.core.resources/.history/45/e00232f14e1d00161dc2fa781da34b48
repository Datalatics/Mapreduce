package ca.datalatics.mapreduce.custom;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class AverageWordSize {
	
	public static class AverageWordMapper extends Mapper<LongWritable, Text, Text, Text>{
		
		public void map(){
			
		}
		
	}
	
	public static class AverageWordReducer extends Reducer<Text,Text,Text,Text>{
		
		public void reduce(){
			
		}
		
	}
	
	public static class IntPair implements WritableComparable<IntPair>{
		
		private int first;
		private int second;
		
		public void set(int left, int right){
			this.first=left;
			this.second=right;
		}

		@Override
		public void readFields(DataInput arg0) throws IOException {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void write(DataOutput arg0) throws IOException {
			// TODO Auto-generated method stub
			
		}

		@Override
		public int compareTo(IntPair o) {
			// TODO Auto-generated method stub
			return 0;
		}
		
		

		
		
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "JobName");
		job.setJarByClass(ca.datalatics.mapreduce.custom.AverageWordSize.class);
		job.setMapperClass(AverageWordMapper.class);

		job.setReducerClass(AverageWordReducer.class);

		// TODO: specify output types
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		// TODO: specify input and output DIRECTORIES (not files)
		FileInputFormat.setInputPaths(job, new Path("src"));
		FileOutputFormat.setOutputPath(job, new Path("out"));

		if (!job.waitForCompletion(true))
			return;
	}

}
