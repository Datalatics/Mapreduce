package ca.datalatics.mapreduce.joins;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class ReduceSideJoin {

	public static class CustsMapper extends Mapper<Object, Text, Text, Text> {
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
			String record = value.toString();
			String[] parts = record.split(",");
			context.write(new Text(parts[0]), new Text("custs\t" + parts[1]));
		}
	}
	
	public static class TxnsMapper extends Mapper<Object, Text, Text, Text>{
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException{
			
			String record = value.toString();
			String[] parts = record.split(",");
			context.write(new Text(parts[2]), new Text("txns\t" + parts[3]));
			
		}
	}
	
	public static class ReduceJoinReducer extends Reducer<Text, Text, Text, Text>
	{
	    public void reduce(Object key, Text values, Context context) throws IOException, InterruptedException
	    {
	    	int count=0;
	    	int total=0;
	    	String name=null;
	    	
	    	String splitStr[] = values.toString().split("\t");
	    	if(splitStr[0].equals("custs"))
	    	{
	    		name=splitStr[1];
	    	}
	    	else if(splitStr[0].equals("txns"))
	    	{
	    		count++;
	    		total=+Integer.parseInt(splitStr[1]);
	    	}
	    	String str = String.format("%d/t%f", count,total);
	    	context.write(new Text(name), new Text(str));
	    }
		
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "ReduceSideJoin");
		job.setJarByClass(ca.datalatics.mapreduce.joins.ReduceSideJoin.class);
		job.setMapperClass(Mapper.class);
		job.setReducerClass(Reducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		
		Path outputPath = new Path(args[1]);
		outputPath.getFileSystem(conf).delete(outputPath, true);
		if (!job.waitForCompletion(true))
			return;
	}

}
